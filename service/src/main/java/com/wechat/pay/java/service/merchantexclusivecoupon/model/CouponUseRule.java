// Copyright 2021 Tencent Inc. All rights reserved.
//
// 营销商家券对外API
//
// No description provided (generated by Openapi Generator
// https://github.com/openapitools/openapi-generator)
//
// API version: 0.0.11

// Code generated by WechatPay APIv3 Generator based on [OpenAPI
// Generator](https://openapi-generator.tech); DO NOT EDIT.

package com.wechat.pay.java.service.merchantexclusivecoupon.model;

import static com.wechat.pay.java.core.util.StringUtil.toIndentedString;

import com.google.gson.annotations.SerializedName;

/** CouponUseRule */
public class CouponUseRule {
  /** 券可核销时间 说明：日期区间内可以使用优惠 */
  @SerializedName("coupon_available_time")
  private FavorAvailableTime couponAvailableTime;

  /** 固定面额满减券使用规则 说明：固定面额满减，折扣券，换购券使用规则三选一，stock_type为NORMAL时必填。 */
  @SerializedName("fixed_normal_coupon")
  private FixedValueStockMsg fixedNormalCoupon;

  /** 折扣券使用规则 说明：固定面额满减，折扣券，换购券使用规则三选一，stock_type为DISCOUNT时必填。 */
  @SerializedName("discount_coupon")
  private DiscountMsg discountCoupon;

  /** 换购券使用规则 说明：固定面额满减，折扣券，换购券使用规则三选一，stock_type为EXCHANGE时必填。 */
  @SerializedName("exchange_coupon")
  private ExchangeMsg exchangeCoupon;

  /** 核销方式 说明：核销方式 */
  @SerializedName("use_method")
  private CouponUseMethod useMethod;

  /** 小程序AppID 说明：核销方式为线上小程序核销才有效 */
  @SerializedName("mini_programs_appid")
  private String miniProgramsAppid;

  /** 小程序path 说明：核销方式为线上小程序核销才有效 */
  @SerializedName("mini_programs_path")
  private String miniProgramsPath;

  public FavorAvailableTime getCouponAvailableTime() {
    return couponAvailableTime;
  }

  public void setCouponAvailableTime(FavorAvailableTime couponAvailableTime) {
    this.couponAvailableTime = couponAvailableTime;
  }

  public FixedValueStockMsg getFixedNormalCoupon() {
    return fixedNormalCoupon;
  }

  public void setFixedNormalCoupon(FixedValueStockMsg fixedNormalCoupon) {
    this.fixedNormalCoupon = fixedNormalCoupon;
  }

  public DiscountMsg getDiscountCoupon() {
    return discountCoupon;
  }

  public void setDiscountCoupon(DiscountMsg discountCoupon) {
    this.discountCoupon = discountCoupon;
  }

  public ExchangeMsg getExchangeCoupon() {
    return exchangeCoupon;
  }

  public void setExchangeCoupon(ExchangeMsg exchangeCoupon) {
    this.exchangeCoupon = exchangeCoupon;
  }

  public CouponUseMethod getUseMethod() {
    return useMethod;
  }

  public void setUseMethod(CouponUseMethod useMethod) {
    this.useMethod = useMethod;
  }

  public String getMiniProgramsAppid() {
    return miniProgramsAppid;
  }

  public void setMiniProgramsAppid(String miniProgramsAppid) {
    this.miniProgramsAppid = miniProgramsAppid;
  }

  public String getMiniProgramsPath() {
    return miniProgramsPath;
  }

  public void setMiniProgramsPath(String miniProgramsPath) {
    this.miniProgramsPath = miniProgramsPath;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponUseRule {\n");
    sb.append("    couponAvailableTime: ")
        .append(toIndentedString(couponAvailableTime))
        .append("\n");
    sb.append("    fixedNormalCoupon: ").append(toIndentedString(fixedNormalCoupon)).append("\n");
    sb.append("    discountCoupon: ").append(toIndentedString(discountCoupon)).append("\n");
    sb.append("    exchangeCoupon: ").append(toIndentedString(exchangeCoupon)).append("\n");
    sb.append("    useMethod: ").append(toIndentedString(useMethod)).append("\n");
    sb.append("    miniProgramsAppid: ").append(toIndentedString(miniProgramsAppid)).append("\n");
    sb.append("    miniProgramsPath: ").append(toIndentedString(miniProgramsPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }
}
