// Copyright 2021 Tencent Inc. All rights reserved.
//
// 爱心餐对外API
//
// 微信支付爱心餐公益计划旨在面向深圳市的市政一线环卫工人提供每周一餐的1分钱用餐公益服务。在受助端，微信支付联动上千家餐饮门店关爱特殊人群，通过微信支付数字化能力将人群身份认证与公益福利领用全流程线上化，实现公益福利精准到人。在捐赠端，微信支付发挥连接优势与平台能力，结合用户就餐场景通过爱心餐一块捐插件让用户可在点餐时顺手捐1元，带动更多社会力量致谢城市美容师。
//
// API version: 0.0.4

// Code generated by WechatPay APIv3 Generator based on [OpenAPI
// Generator](https://openapi-generator.tech); DO NOT EDIT.

package com.wechat.pay.java.service.lovefeast.model;

import static com.wechat.pay.java.core.util.StringUtil.toIndentedString;

import com.google.gson.annotations.SerializedName;
import java.util.ArrayList;
import java.util.List;

/** OrdersListByUserResponse */
public class OrdersListByUserResponse {
  /** 捐赠单详情 说明：捐赠单详情 */
  @SerializedName("data")
  private List<OrdersEntity> data = new ArrayList<OrdersEntity>();
  /** 该次请求返回的记录条数 说明：该次请求返回的记录条数 */
  @SerializedName("count")
  private Integer count;
  /** 最大记录条数 说明：返回的最大记录条数，默认值为10 */
  @SerializedName("limit")
  private Integer limit;
  /** 起始位置 说明：查询起始位置。 */
  @SerializedName("offset")
  private Integer offset;
  /** 全部记录数量 说明：全部记录数量 */
  @SerializedName("total_count")
  private Long totalCount;

  public List<OrdersEntity> getData() {
    return data;
  }

  public void setData(List<OrdersEntity> data) {
    this.data = data;
  }

  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersListByUserResponse {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }
}
