// Copyright 2021 Tencent Inc. All rights reserved.
//
// 营销商家券对外API
//
// No description provided (generated by Openapi Generator
// https://github.com/openapitools/openapi-generator)
//
// API version: 0.0.11

// Code generated by WechatPay APIv3 Generator based on [OpenAPI
// Generator](https://openapi-generator.tech); DO NOT EDIT.

package com.wechat.pay.java.service.merchantexclusivecoupon.model;

import static com.wechat.pay.java.core.util.StringUtil.toIndentedString;

import com.google.gson.annotations.SerializedName;

/** StockSendRule */
public class StockSendRule {
  /** 批次总预算 说明：总预算金额，单位分 注：该字段暂未开放 */
  @SerializedName("max_amount")
  private Long maxAmount;

  /** 批次最大发放个数 说明：批次最大可发放个数限制 特殊规则：取值范围 1 ≤ value ≤ 1000000000 */
  @SerializedName("max_coupons")
  private Long maxCoupons;

  /** 用户最大可领个数 说明：用户可领个数，每个用户最多100张券。 */
  @SerializedName("max_coupons_per_user")
  private Integer maxCouponsPerUser;

  /** 单天发放上限金额 说明：单天发放上限金额 注：该字段暂未开放 */
  @SerializedName("max_amount_by_day")
  private Long maxAmountByDay;

  /**
   * 单天发放上限个数 说明：单天发放上限个数（stock\\_type为DISCOUNT或EXCHANGE时可传入此字段控制单天发放上限）。 特殊规则：取值范围 1 ≤ value ≤
   * 1000000000
   */
  @SerializedName("max_coupons_by_day")
  private Long maxCouponsByDay;

  /**
   * 是否开启自然人限领 说明：不填默认否，枚举值： true：是 false：否 注：自然人防刷即同证件号下的所有账户合并计算的限领次数（限领次数指的是参数字段“用户最大领取个数”填写的值）
   */
  @SerializedName("natural_person_limit")
  private Boolean naturalPersonLimit;

  /** 可疑账号拦截 说明：true-是；false-否，不填默认否 */
  @SerializedName("prevent_api_abuse")
  private Boolean preventApiAbuse;

  /** 是否允许转赠，暂不开放 说明：不填默认否，枚举值： true：是 false：否 该字段暂未开放 */
  @SerializedName("transferable")
  private Boolean transferable;

  /** 是否允许分享链接，暂不开放 说明：不填默认否，枚举值： true：是 false：否 该字段暂未开放 */
  @SerializedName("shareable")
  private Boolean shareable;

  public Long getMaxAmount() {
    return maxAmount;
  }

  public void setMaxAmount(Long maxAmount) {
    this.maxAmount = maxAmount;
  }

  public Long getMaxCoupons() {
    return maxCoupons;
  }

  public void setMaxCoupons(Long maxCoupons) {
    this.maxCoupons = maxCoupons;
  }

  public Integer getMaxCouponsPerUser() {
    return maxCouponsPerUser;
  }

  public void setMaxCouponsPerUser(Integer maxCouponsPerUser) {
    this.maxCouponsPerUser = maxCouponsPerUser;
  }

  public Long getMaxAmountByDay() {
    return maxAmountByDay;
  }

  public void setMaxAmountByDay(Long maxAmountByDay) {
    this.maxAmountByDay = maxAmountByDay;
  }

  public Long getMaxCouponsByDay() {
    return maxCouponsByDay;
  }

  public void setMaxCouponsByDay(Long maxCouponsByDay) {
    this.maxCouponsByDay = maxCouponsByDay;
  }

  public Boolean getNaturalPersonLimit() {
    return naturalPersonLimit;
  }

  public void setNaturalPersonLimit(Boolean naturalPersonLimit) {
    this.naturalPersonLimit = naturalPersonLimit;
  }

  public Boolean getPreventApiAbuse() {
    return preventApiAbuse;
  }

  public void setPreventApiAbuse(Boolean preventApiAbuse) {
    this.preventApiAbuse = preventApiAbuse;
  }

  public Boolean getTransferable() {
    return transferable;
  }

  public void setTransferable(Boolean transferable) {
    this.transferable = transferable;
  }

  public Boolean getShareable() {
    return shareable;
  }

  public void setShareable(Boolean shareable) {
    this.shareable = shareable;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockSendRule {\n");
    sb.append("    maxAmount: ").append(toIndentedString(maxAmount)).append("\n");
    sb.append("    maxCoupons: ").append(toIndentedString(maxCoupons)).append("\n");
    sb.append("    maxCouponsPerUser: ").append(toIndentedString(maxCouponsPerUser)).append("\n");
    sb.append("    maxAmountByDay: ").append(toIndentedString(maxAmountByDay)).append("\n");
    sb.append("    maxCouponsByDay: ").append(toIndentedString(maxCouponsByDay)).append("\n");
    sb.append("    naturalPersonLimit: ").append(toIndentedString(naturalPersonLimit)).append("\n");
    sb.append("    preventApiAbuse: ").append(toIndentedString(preventApiAbuse)).append("\n");
    sb.append("    transferable: ").append(toIndentedString(transferable)).append("\n");
    sb.append("    shareable: ").append(toIndentedString(shareable)).append("\n");
    sb.append("}");
    return sb.toString();
  }
}
